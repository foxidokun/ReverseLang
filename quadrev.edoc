~sya~
(x) print fn
[
    ;(x) __builtin_print__ return
]

(x) sqrt fn
[
    ;(x) __builtin_sqrt__ return
]

(x) input fn
[
    ; __builtin_input__ return
]

(b,c) linear_solve fn
[
    ((0) == (b)) if
    {
    ((0) == (c)) if
        {
        ;(228) print
            ;0 return
        } else {
        ;(0) print
            ;0 return
        }
        
    } else {
    ;(1) print
        ;((b) / ((c) - (0))) print
        ;0 return
    }
    
]

(a,b,c) square_solver fn
[
    ((0) == (a)) if
    {
    ;(b,c) linear_solve
        ;0 return
    }
    
    ((0) == (b)) if
    {
    ((0) < (c)) if
        {
        ;(2) print
            ;((((c) - (0)) sqrt) + (0)) print
            ;((((c) - (0)) sqrt) - (0)) print
            ;0 return
        }
        
        ((0) == (c)) if
        {
        ;(1) print
            ;(0) print
            ;0 return
        } else {
        ;(0) print
            ;0 return
        }
        
    }
    
    ((0) == (c)) if
    {
    ;(2) print
        ;(0) print
        ;((a) / ((b) - (0))) print
        ;0 return
    }
    
    ;0 = discr let
    ;((((c) * (a)) * (4)) - ((b) * (b))) = discr
    ((0) < (discr)) if
    {
    ;(0) print
        ;0 return
    }
    
    ((0) == (discr)) if
    {
    ;(1) print
        ;(((a) * (2)) / ((b) - (0))) print
        ;0 return
    }
    
    ;0 = disrc_root let
    ;(discr) = disrc_root
    ;(2) print
    ;(((2) * (a)) / (((disrc_root) + (b)) - (0))) print
    ;(((2) * (a)) / (((disrc_root) - (b)) - (0))) print
    ;0 return
]

;0 = a let
;((0) input) = a
;0 = b let
;((0) input) = b
;0 = c let
;((0) input) = c
;(a,b,c) square_solver
~nya~
